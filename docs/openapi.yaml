openapi: 3.0.3
info:
  title: Calendar API
  description: API for managing calendars and calendar events
  version: 1.0.0
  contact:
    name: Zachary Maynard

servers:
  - url: /api
    description: API v1

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
        detail:
          type: string
        code:
          type: string

    # Domain Model Schemas
    UserCreate:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          minLength: 1
          maxLength: 255

    UserResponse:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        username:
          type: string
        owned_calendar_ids:
          type: array
          items:
            type: string
            format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserWithAccessKey:
      allOf:
        - $ref: '#/components/schemas/UserResponse'
        - type: object
          properties:
            access_key:
              type: string

    CalendarCreate:
      type: object
      required:
        - calendar_name
      properties:
        calendar_name:
          type: string
          minLength: 1
          maxLength: 255
        editor_ids:
          type: array
          items:
            type: string
            format: uuid
          default: []
        reader_ids:
          type: array
          items:
            type: string
            format: uuid
          default: []
        public_read:
          type: boolean
          default: false
        public_write:
          type: boolean
          default: false

    CalendarUpdate:
      type: object
      properties:
        calendar_name:
          type: string
          minLength: 1
          maxLength: 255
        editor_ids:
          type: array
          items:
            type: string
            format: uuid
        reader_ids:
          type: array
          items:
            type: string
            format: uuid
        public_read:
          type: boolean
        public_write:
          type: boolean

    CalendarResponse:
      type: object
      properties:
        calendar_id:
          type: string
          format: uuid
        owner_user_id:
          type: string
          format: uuid
        calendar_name:
          type: string
        editor_ids:
          type: array
          items:
            type: string
            format: uuid
        reader_ids:
          type: array
          items:
            type: string
            format: uuid
        public_read:
          type: boolean
        public_write:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CalendarEventCreate:
      type: object
      required:
        - title
        - start_time
        - end_time
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        is_all_day:
          type: boolean
          default: false

    CalendarEventUpdate:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        is_all_day:
          type: boolean

    CalendarEventResponse:
      type: object
      properties:
        event_id:
          type: string
          format: uuid
        calendar_id:
          type: string
          format: uuid
        creator_user_id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        is_all_day:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    # Minimum Required Event Schemas
    EventCreate:
      type: object
      required:
        - title
        - start_time
        - end_time
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time

    EventUpdate:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time

    EventResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PaginationParams:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          default: 1
        page_size:
          type: integer
          minimum: 1
          maximum: 100
          default: 20

    PaginatedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        total:
          type: integer
        page:
          type: integer
        page_size:
          type: integer
        total_pages:
          type: integer

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        version:
          type: string
        timestamp:
          type: string
          format: date-time

paths:
  /health:
    get:
      summary: Health check endpoint
      responses:
        '200':
          description: Health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  # Minimum Required Endpoints
  /events:
    get:
      summary: List all events
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreate'
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /events/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get specific event
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update existing event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUpdate'
      responses:
        '200':
          description: Event updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete event
      responses:
        '204':
          description: Event deleted
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Domain Model Endpoints
  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithAccessKey'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /calendars:
    post:
      summary: Create a new calendar
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarCreate'
      responses:
        '201':
          description: Calendar created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: List calendars
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/schemas/PaginationParams'
      responses:
        '200':
          description: List of calendars
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/CalendarResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /calendars/{calendar_id}:
    parameters:
      - name: calendar_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get calendar details
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Calendar details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Calendar not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      summary: Update calendar
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarUpdate'
      responses:
        '200':
          description: Calendar updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Calendar not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete calendar
      security:
        - ApiKeyAuth: []
      responses:
        '204':
          description: Calendar deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Calendar not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /calendars/{calendar_id}/events:
    parameters:
      - name: calendar_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      summary: Create a new calendar event
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarEventCreate'
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarEventResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Calendar not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: List calendar events
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/schemas/PaginationParams'
        - name: start_time
          in: query
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/CalendarEventResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Calendar not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /calendars/{calendar_id}/events/{event_id}:
    parameters:
      - name: calendar_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: event_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get event details
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarEventResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      summary: Update event
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarEventUpdate'
      responses:
        '200':
          description: Event updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarEventResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete event
      security:
        - ApiKeyAuth: []
      responses:
        '204':
          description: Event deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
