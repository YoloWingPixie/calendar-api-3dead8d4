"""Initial schema

Revision ID: 001
Revises:
Create Date: 2025-01-06

"""

from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "001"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column(
            "user_id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("username", sa.String(length=255), nullable=False),
        sa.Column("access_key", sa.String(length=255), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("user_id"),
        sa.UniqueConstraint("access_key"),
        sa.UniqueConstraint("username"),
    )
    op.create_index("idx_users_access_key", "users", ["access_key"], unique=False)

    op.create_table(
        "calendars",
        sa.Column(
            "calendar_id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("owner_user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("calendar_name", sa.String(length=255), nullable=False),
        sa.Column(
            "editor_ids",
            postgresql.ARRAY(postgresql.UUID(as_uuid=True)),
            server_default="{}",
            nullable=False,
        ),
        sa.Column(
            "reader_ids",
            postgresql.ARRAY(postgresql.UUID(as_uuid=True)),
            server_default="{}",
            nullable=False,
        ),
        sa.Column("public_read", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("public_write", sa.Boolean(), server_default="false", nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["owner_user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("calendar_id"),
    )
    op.create_index(
        "idx_calendars_owner_user_id", "calendars", ["owner_user_id"], unique=False
    )
    op.create_index(
        "idx_calendars_editor_ids",
        "calendars",
        ["editor_ids"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_calendars_reader_ids",
        "calendars",
        ["reader_ids"],
        unique=False,
        postgresql_using="gin",
    )

    op.create_table(
        "calendar_events",
        sa.Column(
            "event_id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("calendar_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("creator_user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("start_time", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("end_time", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("is_all_day", sa.Boolean(), server_default="false", nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["calendar_id"], ["calendars.calendar_id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["creator_user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("event_id"),
        sa.CheckConstraint("end_time > start_time", name="end_after_start"),
        sa.CheckConstraint(
            "end_time - start_time >= interval '1 minute'", name="min_duration"
        ),
        sa.CheckConstraint(
            "(is_all_day = false) OR "
            "(is_all_day = true AND "
            "start_time::time = '00:00:00' AND "
            "end_time::time = '23:59:59' AND "
            "start_time::date = end_time::date)",
            name="all_day_constraint",
        ),
    )
    op.create_index(
        "idx_calendar_events_calendar_id",
        "calendar_events",
        ["calendar_id"],
        unique=False,
    )
    op.create_index(
        "idx_calendar_events_creator_user_id",
        "calendar_events",
        ["creator_user_id"],
        unique=False,
    )
    op.create_index(
        "idx_calendar_events_start_time",
        "calendar_events",
        ["start_time"],
        unique=False,
    )
    op.create_index(
        "idx_calendar_events_end_time", "calendar_events", ["end_time"], unique=False
    )
    op.create_index(
        "idx_calendar_events_time_range",
        "calendar_events",
        ["calendar_id", "start_time", "end_time"],
        unique=False,
    )

    # Create update trigger function
    op.execute("""
        CREATE OR REPLACE FUNCTION update_updated_at_column()
        RETURNS TRIGGER AS $$
        BEGIN
            NEW.updated_at = CURRENT_TIMESTAMP;
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """)

    # Create triggers
    op.execute(
        "CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users "
        "FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();"
    )
    op.execute(
        "CREATE TRIGGER update_calendars_updated_at BEFORE UPDATE ON calendars "
        "FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();"
    )
    op.execute(
        "CREATE TRIGGER update_calendar_events_updated_at BEFORE UPDATE ON "
        "calendar_events FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(
        "DROP TRIGGER IF EXISTS update_calendar_events_updated_at ON calendar_events;"
    )
    op.execute("DROP TRIGGER IF EXISTS update_calendars_updated_at ON calendars;")
    op.execute("DROP TRIGGER IF EXISTS update_users_updated_at ON users;")
    op.execute("DROP FUNCTION IF EXISTS update_updated_at_column();")

    op.drop_index("idx_calendar_events_time_range", table_name="calendar_events")
    op.drop_index("idx_calendar_events_end_time", table_name="calendar_events")
    op.drop_index("idx_calendar_events_start_time", table_name="calendar_events")
    op.drop_index("idx_calendar_events_creator_user_id", table_name="calendar_events")
    op.drop_index("idx_calendar_events_calendar_id", table_name="calendar_events")
    op.drop_table("calendar_events")

    op.drop_index(
        "idx_calendars_reader_ids", table_name="calendars", postgresql_using="gin"
    )
    op.drop_index(
        "idx_calendars_editor_ids", table_name="calendars", postgresql_using="gin"
    )
    op.drop_index("idx_calendars_owner_user_id", table_name="calendars")
    op.drop_table("calendars")

    op.drop_index("idx_users_access_key", table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
