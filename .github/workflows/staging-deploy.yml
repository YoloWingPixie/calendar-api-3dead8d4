name: Staging Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  id-token: write
  deployments: write

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: calendar-api
  AWS_ROLE_ARN: arn:aws:iam::655593807337:role/github-actions-calendar-api

jobs:
  # Build RC container
  build:
    name: Build Release Candidate
    runs-on: ubuntu-latest
    environment: dev
    # Only for develop, release/*, or hotfix/* branches
    if: |
      github.actor != 'dependabot[bot]' &&
      (github.head_ref == 'develop' ||
       startsWith(github.head_ref, 'release/') ||
       startsWith(github.head_ref, 'hotfix/'))

    outputs:
      rc_image_uri: ${{ steps.build.outputs.rc_image_uri }}
      sha_image_uri: ${{ steps.build.outputs.sha_image_uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Build and push RC container
        id: build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Get version information
          if [ -f "VERSION" ]; then
            VERSION=$(cat VERSION | tr -cd '0-9.')
          else
            VERSION="0.0.0"
          fi
          
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          COMMIT=${HEAD_SHA:0:7}
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Create semantic version tags
          VERSION_TAG="v${VERSION}"
          RC_TAG="v${VERSION}-rc.${{ github.run_number }}"
          SHA_TAG="v${VERSION}-${COMMIT}"
          SHA_FULL_TAG="sha-${HEAD_SHA}"
          IMAGE_NAME="$ECR_REGISTRY/$ECR_REPOSITORY"

          echo "Building container with version: $VERSION"
          echo "Tags: $VERSION_TAG, $RC_TAG, $SHA_TAG, $SHA_FULL_TAG"

          # Build with version information embedded
          docker build \
            --build-arg VERSION="v$VERSION" \
            --build-arg COMMIT="$COMMIT" \
            --build-arg DATE="$DATE" \
            -t $IMAGE_NAME:$VERSION_TAG \
            -t $IMAGE_NAME:$RC_TAG \
            -t $IMAGE_NAME:$SHA_TAG \
            -t $IMAGE_NAME:$SHA_FULL_TAG \
            -f docker/Dockerfile .

          echo "Pushing images..."
          docker push $IMAGE_NAME:$VERSION_TAG
          docker push $IMAGE_NAME:$RC_TAG
          docker push $IMAGE_NAME:$SHA_TAG
          docker push $IMAGE_NAME:$SHA_FULL_TAG

          echo "rc_image_uri=$IMAGE_NAME:$RC_TAG" >> $GITHUB_OUTPUT
          echo "sha_image_uri=$IMAGE_NAME:$SHA_TAG" >> $GITHUB_OUTPUT
          echo "version_image_uri=$IMAGE_NAME:$VERSION_TAG" >> $GITHUB_OUTPUT

      - name: Comment RC tags on PR
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const rcTag = 'rc-${{ github.run_number }}-${{ github.event.pull_request.head.sha }}'.substring(0, 40);
            const shaTag = 'sha-${{ github.event.pull_request.head.sha }}';

            const body = `🏗️ **Release Candidate built:**
            - RC Tag: \`${rcTag}\`
            - SHA Tag: \`${shaTag}\`

            The SHA-tagged image will be deployed to production upon merge.`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

  # Deploy to staging
  deploy:
    name: Deploy to Staging
    needs: build
    uses: ./.github/workflows/deploy-common.yml
    with:
      environment: stg
      image_uri: ${{ needs.build.outputs.rc_image_uri }}
      tf_workspace: stg
      is_ephemeral: false
      deployment_description: "Staging deployment for RC validation"
    secrets: inherit

  # Run staging tests
  test:
    name: Staging Tests
    needs: [build, deploy]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Run staging tests
        env:
          STAGING_URL: ${{ needs.deploy.outputs.environment_url }}
        run: |
          echo "Running integration tests against staging at $STAGING_URL"

          # Basic health check
          if [[ -n "$STAGING_URL" ]]; then
            curl -f "$STAGING_URL/health" || echo "Health check failed"
          fi

          # Add actual integration test commands here
          # For Go application, you might want to run:
          # go test ./tests/integration/... -staging-url=$STAGING_URL

  # Comment final status
  comment:
    name: Comment Deployment Status
    needs: [build, deploy, test]
    if: always() && needs.deploy.outputs.environment_url
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Comment staging URL on PR
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const url = '${{ needs.deploy.outputs.environment_url }}';
            const testStatus = '${{ needs.test.result }}';
            const statusEmoji = testStatus === 'success' ? '✅' : '⚠️';

            const body = `${statusEmoji} **Deployed to Staging:**

            **URL:** ${url}
            **RC Image:** \`rc-${{ github.run_number }}-${{ github.event.pull_request.head.sha }}\`
            **SHA Image:** \`sha-${{ github.event.pull_request.head.sha }}\`
            **Tests:** ${testStatus}

            This exact image (sha-tagged) will be deployed to production upon merge.`;

            // Delete previous staging deployment comments
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const botComments = comments.filter(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Deployed to Staging:')
            );

            for (const comment of botComments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
