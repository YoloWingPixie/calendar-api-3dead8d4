name: Ephemeral Environment Deploy

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [develop]

permissions:
  contents: read
  pull-requests: write
  id-token: write
  deployments: write

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: calendar-api
  AWS_ROLE_ARN: arn:aws:iam::655593807337:role/github-actions-calendar-api

jobs:
  # Build and push dev container
  build:
    name: Build Dev Container
    runs-on: ubuntu-latest
    # Skip for PRs from protected branches
    if: |
      github.actor != 'dependabot[bot]' &&
      github.head_ref != 'main' &&
      github.head_ref != 'develop' &&
      !startsWith(github.head_ref, 'release/')

    outputs:
      image_uri: ${{ steps.build.outputs.image_uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Build and push Docker image
        id: build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: dev-${{ github.event.pull_request.head.sha }}
        run: |
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

          # Build and push image
          docker build -t $IMAGE_URI -f docker/Dockerfile .
          docker push $IMAGE_URI

          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Comment image tag on PR
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const body = `🐳 **Docker image built:** \`dev-${{ github.event.pull_request.head.sha }}\``;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

  # Deploy using common workflow
  deploy:
    name: Deploy to Ephemeral
    needs: build
    uses: ./.github/workflows/deploy-common.yml
    with:
      environment: pr-${{ github.event.number }}
      image_uri: ${{ needs.build.outputs.image_uri }}
      tf_workspace: pr-${{ github.event.number }}
      is_ephemeral: true
      pr_number: ${{ github.event.number }}
      comment_on_pr: true
      deployment_description: "Ephemeral PR environment"
    secrets: inherit

  # Comment deployment URL on PR
  comment:
    name: Comment Deployment URL
    needs: [build, deploy]
    if: needs.deploy.outputs.environment_url
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Comment deployment URL on PR
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const url = '${{ needs.deploy.outputs.environment_url }}';
            const body = `🚀 **Ephemeral environment deployed!**

            **URL:** ${url}
            **Image:** \`dev-${{ github.event.pull_request.head.sha }}\`

            This environment will be automatically destroyed when the PR is closed.`;

            // Delete previous deployment comments
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const botComments = comments.filter(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Ephemeral environment deployed!')
            );

            for (const comment of botComments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
