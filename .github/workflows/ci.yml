name: CI

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write

env:
  FORCE_COLOR: 1

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      (github.event.pull_request.base.ref == 'main' ||
       contains(github.event.pull_request.base.ref, 'release/') ||
       (contains(github.event.pull_request.head.ref, 'release/') && github.event.pull_request.base.ref == 'main'))

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Checkout base branch
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}

      - name: Validate semver and version bump
        id: validate
        run: |
          # Get current version from VERSION file on PR branch
          if [ -f "VERSION" ]; then
            PR_VERSION="v$(cat VERSION)"
          else
            PR_VERSION="v0.0.0"
          fi
          
          # Get base branch version from its VERSION file
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git checkout -b temp-base origin/${{ github.event.pull_request.base.ref }}
          if [ -f "VERSION" ]; then
            BASE_VERSION="v$(cat VERSION)"
          else
            BASE_VERSION="v0.0.0"
          fi
          git checkout ${{ github.event.pull_request.head.ref }}
          
          echo "VERSION file on PR branch: $PR_VERSION"
          echo "VERSION file on base branch: $BASE_VERSION"
          
          # Validate semantic versioning format
          if ! echo "$PR_VERSION" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$'; then
            echo "❌ Invalid semantic version format in VERSION file: $PR_VERSION"
            exit 1
          fi
          
          # Check that version was bumped (if not the same)
          if [ "$PR_VERSION" = "$BASE_VERSION" ]; then
            echo "⚠️ Version not bumped - VERSION file unchanged"
          else
            echo "✅ Version bumped from $BASE_VERSION to $PR_VERSION"
          fi
          
          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "pr_version=$PR_VERSION" >> $GITHUB_OUTPUT

      - name: Comment version bump on PR
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const base_version = '${{ steps.validate.outputs.base_version }}';
            const pr_version = '${{ steps.validate.outputs.pr_version }}';

            // Delete previous version bump comments
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.pull_request.number }}
            });

            const botComments = comments.filter(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('📦 **Calendar API** will bump from')
            );

            for (const comment of botComments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
            }

            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.pull_request.number }},
              body: `📦 **Calendar API** will bump from \`${base_version}\` → \`${pr_version}\``
            });

  test:
    name: Test Go ${{ matrix.go-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go-version: ["1.23", "1.24"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Run formatter check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Run 'gofmt -s -w .'"
            gofmt -s -l .
            exit 1
          fi

      - name: Run vet
        run: |
          go vet ./...

      - name: Install golangci-lint
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run linter
        run: |
          $(go env GOPATH)/bin/golangci-lint run ./...

      - name: Build application
        run: |
          # Get version information
          if [ -f "VERSION" ]; then
            VERSION="v$(cat VERSION)"
          else
            VERSION="v0.0.0-dev"
          fi
          COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          echo "Building version: $VERSION"
          
          # Build with version information embedded
          cd src && go build -ldflags "-X main.Version=$VERSION -X main.Commit=$COMMIT -X main.Date=$DATE" -o ../bin/calendar-api .

      - name: Run tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: test
          DB_PASSWORD: test
          DB_NAME: test
          DB_SSLMODE: disable
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_USER: test
          TEST_DB_PASSWORD: test
          TEST_DB_NAME: calendar_test
          TEST_DB_SSLMODE: disable
        run: |
          go test ./... -v -cover -coverprofile=coverage.out

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.out
          fail_ci_if_error: false

      - name: Verify package compilation
        run: |
          # Get version information
          if [ -f "VERSION" ]; then
            VERSION="v$(cat VERSION)"
          else
            VERSION="v0.0.0-dev"
          fi
          COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          echo "Verifying build for version: $VERSION"
          
          # Build with version information embedded
          cd src && go build -ldflags "-X main.Version=$VERSION -X main.Commit=$COMMIT -X main.Date=$DATE" -o /tmp/calendar-api .
          echo "Application builds successfully"
