# https://taskfile.dev

version: '3'

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list
    silent: true

  demo:
    desc: Run API demo script (OS aware)
    cmds:
      - cmd: |
          if ! docker ps | grep -q calendar-api-server; then
            echo "Starting development server..."
            task: dev
            echo "Waiting for server to start..."
            sleep 5
          fi
          doppler run -- ./tests/api_demo.sh
          if ! docker ps | grep -q calendar-api-server; then
            task: docker:down
          fi
        platforms: [darwin, linux]
      - cmd: powershell -Command "if (-not (docker ps | Select-String -Pattern 'calendar-api-server' -Quiet)) { Write-Host 'Starting development server...'; task dev; Write-Host 'Waiting for server to start...'; Start-Sleep -Seconds 5 }; doppler run -- powershell -ExecutionPolicy Bypass -File ./tests/api_demo.ps1; if (-not (docker ps | Select-String -Pattern 'calendar-api-server' -Quiet)) { task docker:down }"
        platforms: [windows]
    preconditions:
      - sh: '[ -f ./tests/api_demo.sh ] || [ -f ./tests/api_demo.ps1 ]'
        msg: "Demo scripts not found. Please ensure either api_demo.sh or api_demo.ps1 exists in the tests directory."

  install-go:
    desc: Install Go if not present
    cmds:
      - cmd: go version
        platforms: [darwin, linux, windows]
    status:
      - command -v go

  mod:
    desc: Download and verify dependencies
    deps: [install-go]
    cmds:
      - go mod download
      - go mod verify

  tidy:
    desc: Add missing and remove unused modules
    deps: [install-go]
    cmds:
      - go mod tidy

  setup:
    desc: Set up the development environment
    deps: [mod, tidy]

  build:
    desc: Build the application with version information
    cmds:
      - task: build:versioned

  build:versioned:
    desc: Build the application with embedded version information
    vars:
      VERSION:
        sh: powershell -Command "if (Test-Path VERSION) { 'v' + (Get-Content VERSION).Trim() } else { 'v0.0.0-dev' }" || echo "v0.0.0-dev"
      COMMIT:
        sh: git rev-parse --short HEAD 2>/dev/null || echo "unknown"
      DATE:
        sh: powershell -Command "(Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')" || echo "unknown"
    cmds:
      - cd src && go build -ldflags "-X main.Version={{.VERSION}} -X main.Commit={{.COMMIT}} -X main.Date={{.DATE}}" -o ../bin/calendar-api .

  build:simple:
    desc: Build the application without version information
    cmds:
      - cd src && go build -o ../bin/calendar-api .

  format:
    desc: Format code with gofmt
    cmds:
      - go fmt ./...

  lint:
    desc: Lint code with golangci-lint
    cmds:
      - golangci-lint run ./...

  vet:
    desc: Examine Go source code and report suspicious constructs
    cmds:
      - go vet ./...

  test:
    desc: Run tests with coverage
    cmds:
      - doppler run -- go test ./... -v -cover -coverprofile=coverage.out

  test:local:
    desc: Run tests locally without doppler
    cmds:
      - go test ./... -v -cover

  dev:
    desc: Run development server in Docker
    cmds:
      - doppler run -- docker-compose -f docker/docker-compose.yml up --build -d

  dev:local:
    desc: Run development server locally
    cmds:
      - cd src && doppler run -- go run .

  run:
    desc: Run the application locally
    deps: [build]
    cmds:
      - doppler run -- ./bin/calendar-api

  docker:build:
    desc: Build Docker images
    cmds:
      - docker-compose -f docker/docker-compose.yml build

  docker:down:
    desc: Stop Docker containers
    cmds:
      - docker-compose -f docker/docker-compose.yml down

  docker:logs:
    desc: Show Docker logs
    cmds:
      - docker-compose -f docker/docker-compose.yml logs -f

  docker:run:
    desc: Build and run the Docker container standalone with version information
    vars:
      VERSION:
        sh: powershell -Command "if (Test-Path VERSION) { 'v' + (Get-Content VERSION).Trim() } else { 'v0.0.0-dev' }" || echo "v0.0.0-dev"
      COMMIT:
        sh: git rev-parse --short HEAD 2>/dev/null || echo "unknown"
      DATE:
        sh: powershell -Command "(Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')" || echo "unknown"
    cmds:
      - docker build -t calendar-api:local -f docker/Dockerfile --build-arg VERSION={{.VERSION}} --build-arg COMMIT={{.COMMIT}} --build-arg DATE={{.DATE}} .
      - doppler run -- docker run --rm -it -p 8000:8000 --name calendar-api-local calendar-api:local

  # Database management tasks
  db:start:
    desc: Start local PostgreSQL database
    cmds:
      - docker-compose -f docker/docker-compose.yml up -d db

  db:start:test:
    desc: Start local PostgreSQL database with test database
    cmds:
      - docker-compose -f docker/docker-compose.yml --profile test up -d db db-test

  db:stop:
    desc: Stop local PostgreSQL database
    cmds:
      - docker-compose -f docker/docker-compose.yml down

  db:logs:
    desc: Show database logs
    cmds:
      - docker-compose -f docker/docker-compose.yml logs -f db

  db:connect:
    desc: Connect to local database with psql
    cmds:
      - docker exec -it calendar-api-postgres psql -U calendar_user -d calendar_db

  db:connect:test:
    desc: Connect to test database with psql
    cmds:
      - docker exec -it calendar-api-postgres-test psql -U test_user -d calendar_test_db

  db:reset:
    desc: Reset local database (remove volumes and restart)
    cmds:
      - docker-compose -f docker/docker-compose.yml down -v
      - docker-compose -f docker/docker-compose.yml up -d db

  db:migrate:
    desc: Run database migrations with detailed logging
    cmds:
      - cd src && doppler run -- RUN_MIGRATIONS_ONLY=true go run .

  db:migrate:local:
    desc: Run database migrations against local database
    env:
      DB_HOST: localhost
      DB_PORT: 5484
      DB_USER: calendar_user
      DB_PASSWORD: calendar_pass
      DB_NAME: calendar_db
      DB_SSLMODE: disable
    cmds:
      - cd src && RUN_MIGRATIONS_ONLY=true go run .

  db:status:
    desc: Show migration status
    cmds:
      - cd src && doppler run -- go run .

  # Version management tasks
  version:
    desc: Show current version
    cmds:
      - cmd: cat VERSION | tr -d '[:space:]'
        platforms: [darwin, linux]
      - cmd: powershell -Command "(Get-Content VERSION).Trim()"
        platforms: [windows]

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf bin/
      - rm -f coverage.out

  ci:
    desc: Run CI tasks
    deps: [format, vet, lint, test]
